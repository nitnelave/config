# Git

unalias g
g ()
{
  if [ -d '.hg' -o -d '../.hg' ]
  then
    hg "$@"
  else
    git "$@"
  fi
}

gi ()
{
  g "$@"
}

gut ()
{
  g "$@"
}

alias ga="git add"

gci ()
{
  g commit "$@"
}

unalias gco
gco ()
{
  g checkout "$@"
}

gs ()
{
  g status "$@"
}

unalias gst
gst ()
{
  g status "$@"
}

gex ()
{
  g export "$@"
}


# Mercurial
h () {
  if [ -d '.git' -o -d '../.git' ]
  then
    git "$@"
  else
    hg "$@"
  fi
}
compdef h='hg'

ha ()
{
  hg add "$@"
}

hci ()
{
  hg commit "$@"
}

hco ()
{
  hg checkout "$@"
}

hs ()
{
  hg status "$@"
}

hst ()
{
  hg status "$@"
}

hex ()
{
  hg fix && hg uploadchain "$@"
}


unalias ll
ll ()
{
  ls -l "$@"
}

unalias la
la ()
{
  ls -a -l "$@"
}



screen ()
{
  $SCRIPTS/screen.sh "$@"
}

z ()
{
  $LOCK "$@"
}


# Maven
mvn-javadoc ()
{
  mvn clean javadoc:javadoc scm-publish:publish-scm "$@"
}

mvn-release ()
{
  mvn release:clean && mvn release:prepare && mvn release:perform
}

mvn-snapshot ()
{
  mvn clean deploy "$@"
}


# misc commands
gdb ()
{
  /bin/gdb -q "$@"
}

unalias ls 2>/dev/null
ls ()
{
  /bin/ls -phG --color "$@"
}

alias cortune=$HOME/projects/config/cowsay.sh

irc ()
{
  ssh -t nitnelave@server.tolmer.fr "zsh -c 'tmux attach -t irc'"
}

s ()
{
  ls "$@"
}

chmox ()
{
  chmod +x "$@"
}

no ()
{
  ls "$@"
}

suspend ()
{
  sudo pm-suspend "$@"
}

tax ()
{
  tar xf "$@"
}

v ()
{
  nvim -p "$@"
}

vim ()
{
  stty stop '' -ixoff ; vim -p "$@"
}

grep ()
{
  /bin/grep --color=auto "$@"
}


ipython-slides ()
{
  ipython nbconvert --to slides --post serve "$@"
}


alert ()
{
  /usr/bin/notify-send --urgency=low -i \
    "$([ $? = 0 ] && echo terminal || echo error)" \
    "$(history|tail -n1|sed -e 's/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//')"
}

alias turffy='turing && spiffy'
alias spitur='spiffy && turing'
fu ()
{
  fileutil "$@"
}

bb ()
{
  python3 /google/src/cloud/vtolmer/bl/google3/experimental/users/vtolmer/scripts/bl.py build "$@"
}

br ()
{
  python3 /google/src/cloud/vtolmer/bl/google3/experimental/users/vtolmer/scripts/bl.py run "$@"
}

bt ()
{
  python3 /google/src/cloud/vtolmer/bl/google3/experimental/users/vtolmer/scripts/bl.py test "$@"
}

bc ()
{
  build_cleaner "$@"
}

IBLAZE="$(which iblaze) -iblaze_blaze_binary=$HOME/projects/config/bin/blaze_for_iblaze"
ibb ()
{
  $IBLAZE build "$@"
}

ibr ()
{
  $IBLAZE run "$@"
}

ibt ()
{
  $IBLAZE test "$@"
}


chmox ()
{
  chmod +x "$@"
}


dex ()
{
  if [ $# -lt 1 ]; then
    echo "Usage: dex <container>"
    return 1
  fi
  docker exec -it $1 bash
}

suv () {
  sudo -E vim $*
}

dc () (
  cd /home/nitnelave/docker
  docker-compose $*
)

and ()
{
  [ $? -eq 0 ] && "$@"
}
build-mpm ()
(
  cd /google/src/files/head/depot/google3
  rabbit --verifiable mpm --stamp -c opt --symlink_prefix=/tmp/output/blaze- "$@"
)

build-mpm-live ()
{
  build-mpm --mpm_build_arg='--label=live' "$@"
}


reproducible_build ()
{
  rabbit --verifiable build --stamp -c opt $@
}


function g3open() {
  xdg-open "$(/google/data/ro/users/fr/freighttrain/bin/g3url 2> /dev/null "$1")"
}

and ()
{
  [ $? -eq 0 ] && "$@"
}

androidstudio ()
{
  /opt/android-studio-with-blaze-stable/bin/studio.sh $@
}

setup-ssh () {
  rw workstation-gcert --nossh_interactively && ssh workstation
}
